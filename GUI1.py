# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Test2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QMainWindow
import cv2, imutils
from mmcv import Config
from mmdet.apis.inference import inference_detector
import mmcv
from mmcv.runner import load_checkpoint
from mmdet.apis import inference_detector, show_result_pyplot
from mmdet.models import build_detector
import numpy as np
from YOLOv7TensorRT import _COLORS
from YOLOv7TensorRT import BaseEngine
import YOLOv7TensorRT as yolov7
import time


class BaseEngineHumans(BaseEngine):
    # def __init__(self, engine_path, imgsz=(640, 640)):
    #     super().__init__(engine_path, imgsz=(640, 640))
    #     self.class_names = ['person']

    def direct_inference(self, captured_image, conf=0.25):
        origin_img = captured_image
        origin_img = cv2.cvtColor(origin_img, cv2.COLOR_BGR2RGB)
        img, ratio = yolov7.preproc(origin_img, self.imgsz, self.mean, self.std)
        num, final_boxes, final_scores, final_cls_inds = self.infer(img)
        # num: number of object detected
        # final_boxes: Coordinates of the bounding boxes
        # final scores: Confidence score of each object
        # final_cls_inds: The position (index) of class in the list above (80 classes, count start at 0)
        final_boxes = np.reshape(final_boxes, (-1, 4))  # Unknown number of rows and 4 columns
        num = num[0]
        if num > 0:
            final_boxes, final_scores, final_cls_inds = final_boxes[:num] / ratio, final_scores[:num], final_cls_inds[
                                                                                                       :num]
            final_boxes_person = []
            final_scores_person = []
            final_cls_inds_person = []
            for i in range(num):
                if final_cls_inds[i] == 0:
                    final_boxes_person.append(final_boxes[i])
                    final_scores_person.append(final_scores[i])
                    final_cls_inds_person.append(final_cls_inds[i])

            origin_img = yolov7.vis(origin_img, final_boxes_person, final_scores_person, final_cls_inds_person,
                             conf=conf, class_names=self.class_names)
        origin_img = cv2.cvtColor(origin_img, cv2.COLOR_RGB2BGR)
        return origin_img
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1105, 578)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.loadButton = QtWidgets.QPushButton(self.centralwidget)
        self.loadButton.setGeometry(QtCore.QRect(680, 480, 93, 28))
        self.loadButton.setObjectName("loadButton")
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(790, 480, 93, 28))
        self.saveButton.setObjectName("saveButton")
        self.runButton = QtWidgets.QPushButton(self.centralwidget)
        self.runButton.setGeometry(QtCore.QRect(900, 480, 93, 28))
        self.runButton.setObjectName("runButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(680, 400, 121, 16))
        self.label.setObjectName("label")
        self.infTimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.infTimeLabel.setGeometry(QtCore.QRect(800, 400, 121, 16))
        self.infTimeLabel.setObjectName("infTimeLabel")
        self.displayLabel = QtWidgets.QLabel(self.centralwidget)
        self.displayLabel.setGeometry(QtCore.QRect(20, 30, 640, 480))
        self.displayLabel.setObjectName("displayLabel")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(690, 90, 321, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1020, 90, 55, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(690, 160, 121, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(690, 190, 200, 16))
        self.label_4.setObjectName("label_4")
        self.loadCamCalibBtn = QtWidgets.QPushButton(self.centralwidget)
        self.loadCamCalibBtn.setGeometry(QtCore.QRect(690, 210, 93, 28))
        self.loadCamCalibBtn.setObjectName("loadCamCalibBtn")
        self.runCamCalibBtn = QtWidgets.QPushButton(self.centralwidget)
        self.runCamCalibBtn.setGeometry(QtCore.QRect(800, 210, 93, 28))
        self.runCamCalibBtn.setObjectName("runCamCalibBtn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1105, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.thresholdValue = 0.5
        self.time = 0.0
        self.time_start = 0
        self.time_detect = 0
        self.cam = cv2.VideoCapture(0)


        self.retranslateUi(MainWindow)
        self.loadButton.clicked.connect(self.loadImage)
        self.saveButton.clicked.connect(self.saveImage)
        self.runButton.clicked.connect(self.runInference) # <------------- Change inference type here
        self.horizontalSlider.valueChanged['int'].connect(self.updateConfidence)
        self.loadCamCalibBtn.clicked.connect(self.loadCameraCalib)
        self.runCamCalibBtn.clicked.connect(self.runCameraCalib)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def loadCameraCalib(self):
        pass
        # filename = CameraUtils.loadCalibration()
        # if not filename:
        #     return 0
        # self.label_4.setText(filename)

    def runCameraCalib(self):
        pass
        # CameraUtils.runCalibration((7,4), (640, 480), 22)

    def updateConfidence(self, value):
        self.thresholdValue = value/100
        self.label_2.setNum(value)


    def loadImage(self):
        self.filename = QFileDialog.getOpenFileName(directory="C:/Users/LAPTOP/Desktop/Pics")[0]
        self.image = cv2.imread(self.filename)
        self.set_image(self.image)

    def saveImage(self):
        filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        cv2.imwrite(filename, self.tmp)
        print('Image saved as:', self.filename)

    def set_image(self, image):
        """ This function will take image input and resize it
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image, width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.displayLabel.setPixmap(QtGui.QPixmap.fromImage(image))

    def runInference(self):
        pred = BaseEngineHumans(engine_path='./tensorrt-python/yolov7-tiny-nms.trt')


        while True:
            ret, frame = self.cam.read()
            if not ret:
                print("failed to grab frame")
                break
            origin_img = pred.direct_inference(frame)
            self.set_image(origin_img)

            k = cv2.waitKey(1)
            if k % 256 == 27:
                # ESC pressed
                print("Escape hit, closing...")
                break

        self.cam.release()

        cv2.destroyAllWindows()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.loadButton.setText(_translate("MainWindow", "Start"))
        self.saveButton.setText(_translate("MainWindow", "Save"))
        self.runButton.setText(_translate("MainWindow", "Run"))
        self.label.setText(_translate("MainWindow", "Inference Time (s):"))
        self.infTimeLabel.setText(_translate("MainWindow", "Time"))
        self.displayLabel.setText(_translate("MainWindow", "TextLabel"))
        self.label_2.setText(_translate("MainWindow", "TextLabel"))
        self.label_3.setText(_translate("MainWindow", "Camera Calibration"))
        self.label_4.setText(_translate("MainWindow", "File:"))
        self.loadCamCalibBtn.setText(_translate("MainWindow", "Load"))
        self.runCamCalibBtn.setText(_translate("MainWindow", "Run"))

class Logic(QMainWindow, Ui_MainWindow):
    def overwriteLogic(self):
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        app.aboutToQuit.connect(self.closeEvent)
    def closeEvent(self):
        self.cam.release()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Logic()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
